package utils

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"

	"github.com/brian1917/illumioapi"
)

// UserInfo struct will be used to marshal the pce.json file
type UserInfo struct {
	PCE  illumioapi.PCE       `json:"pce,omitempty"`
	User illumioapi.UserLogin `json:"user,omitempty"`
}

// GetPCE reads the PCE information from the JSON generated by the login command
func GetPCE() (illumioapi.PCE, error) {

	file := os.Getenv("ILLUMIO_PCE")
	if file == "" {
		file = "pce.json"
	}

	jsonFile, err := os.Open(file)
	if err != nil {
		return illumioapi.PCE{}, fmt.Errorf("GetPCE error opening JSON file - %s", err)
	}
	defer jsonFile.Close()

	byteValue, err := ioutil.ReadAll(jsonFile)
	if err != nil {
		return illumioapi.PCE{}, fmt.Errorf("GetPCE error reading JSON file - %s", err)
	}

	var userInfo UserInfo
	json.Unmarshal(byteValue, &userInfo)

	return userInfo.PCE, nil
}

// GetUser reads the pce.json file and returns the user information
// GetUser reads the PCE information from the JSON generated by the login command
func GetUser() (illumioapi.UserLogin, error) {

	file := os.Getenv("ILLUMIO_PCE")
	if file == "" {
		file = "pce.json"
	}

	jsonFile, err := os.Open(file)
	if err != nil {
		return illumioapi.UserLogin{}, fmt.Errorf("GetUser error opening JSON file - %s", err)
	}
	defer jsonFile.Close()

	byteValue, err := ioutil.ReadAll(jsonFile)
	if err != nil {
		return illumioapi.UserLogin{}, fmt.Errorf("GetUser error reading JSON file - %s", err)
	}

	var userInfo UserInfo
	json.Unmarshal(byteValue, &userInfo)

	return userInfo.User, nil
}
